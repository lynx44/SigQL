// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SigQL.SqlServer.Tests.Data;

namespace SigQL.SqlServer.Tests.Migrations
{
    [DbContext(typeof(LaborDbContext))]
    [Migration("20211103235249_View_WorkLogEmployee")]
    partial class View_WorkLogEmployee
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFAddressEFEmployee", b =>
                {
                    b.Property<int>("AddressesId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.HasKey("AddressesId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("EFAddressEFEmployee");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Classification")
                        .HasColumnType("int");

                    b.Property<string>("StreetAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFCompositeForeignKeyTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EFCompositeKeyTableFirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EFCompositeKeyTableLastName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EFCompositeKeyTableFirstName", "EFCompositeKeyTableLastName");

                    b.ToTable("CompositeForeignKeyTable");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFCompositeKeyTable", b =>
                {
                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FirstName", "LastName");

                    b.ToTable("CompositeKeyTable");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFEmployee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFWorkLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.ToTable("WorkLog");
                });

            modelBuilder.Entity("EFAddressEFEmployee", b =>
                {
                    b.HasOne("SigQL.SqlServer.Tests.Data.EFAddress", null)
                        .WithMany()
                        .HasForeignKey("AddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SigQL.SqlServer.Tests.Data.EFEmployee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFCompositeForeignKeyTable", b =>
                {
                    b.HasOne("SigQL.SqlServer.Tests.Data.EFCompositeKeyTable", null)
                        .WithMany("EFCompositeForeignKeyTables")
                        .HasForeignKey("EFCompositeKeyTableFirstName", "EFCompositeKeyTableLastName");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFLocation", b =>
                {
                    b.HasOne("SigQL.SqlServer.Tests.Data.EFAddress", "Address")
                        .WithMany("Locations")
                        .HasForeignKey("AddressId");

                    b.Navigation("Address");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFWorkLog", b =>
                {
                    b.HasOne("SigQL.SqlServer.Tests.Data.EFEmployee", "Employee")
                        .WithMany("WorkLogs")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("SigQL.SqlServer.Tests.Data.EFLocation", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.Navigation("Employee");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFAddress", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFCompositeKeyTable", b =>
                {
                    b.Navigation("EFCompositeForeignKeyTables");
                });

            modelBuilder.Entity("SigQL.SqlServer.Tests.Data.EFEmployee", b =>
                {
                    b.Navigation("WorkLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
